syntax = "proto3";

import "Aggregate.proto";
import "Profile.proto";
import "Common.proto";

package org_glowroot_wire_api_model;

option java_package = "org.glowroot.wire.api.model";

message Trace {

  // starting in 0.9.13, trace fields moved to TraceMessage for streaming over the wire
  // (though Trace still used by DownstreamService FullTraceResponse)

  string id = 1; // this is a uuid
  Header header = 2;
  repeated Entry entry = 3; // entry ordering is pre-order depth-first
                            // there are typically multiple "root" nodes (with depth=0)
  repeated Aggregate.Query query = 9;
  Profile main_thread_profile = 4;
  Profile aux_thread_profile = 5;
  bool update = 6; // optimization so the central collector does not need to check for prior partial
                   // trace in common case where this is not an update
  repeated SharedQueryText shared_query_text = 8;

  message Header {
    bool partial = 1;
    bool slow = 2;
    bool async = 3;
    int64 start_time = 4;
    int64 capture_time = 5;
    int64 duration_nanos = 6;
    string transaction_type = 7;
    string transaction_name = 8;
    string headline = 9;
    string user = 10;
    repeated Attribute attribute = 11;
    repeated DetailEntry detail_entry = 12;
    repeated StackTraceElement location_stack_trace_element = 29;
    Error error = 13;
    Timer main_thread_root_timer = 14;
    Timer aux_thread_root_timer = 15; // aux thread root timer is always "auxiliary thread"
    repeated Timer async_timer = 16; // async timers have no child timers
    OldThreadStats old_main_thread_stats = 17; // deprecated in 0.10.9
    OldThreadStats old_aux_thread_stats = 18; // deprecated in 0.10.9
    ThreadStats main_thread_stats = 27;
    ThreadStats aux_thread_stats = 28;
    int32 entry_count = 19;
    bool entry_limit_exceeded = 20;
    int32 query_count = 25;
    bool query_limit_exceeded = 26;
    int64 main_thread_profile_sample_count = 21;
    bool main_thread_profile_sample_limit_exceeded = 22;
    int64 aux_thread_profile_sample_count = 23;
    bool aux_thread_profile_sample_limit_exceeded = 24;

    // introduced in 0.13.1, but only populated and used by the central collector
    int64 capture_time_partial_rollup = 30;
  }

  message Attribute {
    string name = 1;
    repeated string value = 2;
  }

  message DetailEntry {
    string name = 1;
    // one of these two (or neither for an empty value)
    repeated DetailValue value = 2;
    repeated DetailEntry child_entry = 3;
  }

  message DetailValue {
    oneof val {
      string string = 1;
      double double = 2;
      int64 long = 3;
      bool boolean = 4;
    }
  }

  message Error {
    string message = 1;
    Throwable exception = 2;
  }

  message Timer {
    string name = 1;
    bool extended = 2;
    int64 total_nanos = 3;
    int64 count = 4;
    // whether timer was active at the time of a partial trace capture
    bool active = 5;
    repeated Timer child_timer = 6;
  }

  // deprecated in 0.10.9
  message OldThreadStats {
    OptionalInt64 cpu_nanos = 1;
    OptionalInt64 blocked_nanos = 2;
    OptionalInt64 waited_nanos = 3;
    OptionalInt64 allocated_bytes = 4;
  }

  message ThreadStats {
    sint64 cpu_nanos = 1; // -1 means N/A
    sint64 blocked_nanos = 2; // -1 means N/A
    sint64 waited_nanos = 3; // -1 means N/A
    sint64 allocated_bytes = 4; // -1 means N/A
  }

  message Entry {
    int32 depth = 1;
    // start time relative to trace start
    int64 start_offset_nanos = 2;
    int64 duration_nanos = 3;
    // whether entry was active at the time of a partial trace capture
    bool active = 4;
    // message is empty for trace entries added using addErrorEntry()
    string message = 5;
    QueryEntryMessage query_entry_message = 9;
    repeated DetailEntry detail_entry = 6;
    repeated StackTraceElement location_stack_trace_element = 7;
    Error error = 8;
  }

  message QueryEntryMessage {
    int32 shared_query_text_index = 1;
    string prefix = 2;
    string suffix = 3;
  }

  message SharedQueryText {
    string full_text = 1;
    string truncated_text = 2; // sent instead of full_text when full_text_sha1 sent recently
                               // (truncated to 120 characters)
    string truncated_end_text = 3; // sent instead of full_text when full_text_sha1 sent recently
                                   // (truncated to 120 characters)
    string full_text_sha1 = 4; // sent when query text > 240 characters
  }
}
